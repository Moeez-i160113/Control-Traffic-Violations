address:

0xdb5e31fF53BA0824f42513C29921b68649309f20
https://ropsten.etherscan.io/tx/0x4922d171c1234729b169ead323d2bc6306ffd68b44c1fe1847574756ea048cea

[{"constant":false,"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"string","name":"_password","type":"string"}],"name":"Login","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_challanNo","type":"uint256"}],"name":"add_challan_to_user","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_vehicleNo","type":"uint256"}],"name":"add_vehicle_to_user","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"string","name":"a","type":"string"},{"internalType":"string","name":"b","type":"string"}],"name":"compareStrings","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"count","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"string","name":"a1","type":"string"},{"internalType":"string","name":"a2","type":"string"},{"internalType":"string","name":"a3","type":"string"},{"internalType":"string","name":"a4","type":"string"},{"internalType":"string","name":"a5","type":"string"},{"internalType":"string","name":"a6","type":"string"}],"name":"createUser","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getUserChallanCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"getUserChallans","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"string","name":"cnic","type":"string"}],"name":"getUserIdFromCNIC","outputs":[{"internalType":"int256","name":"","type":"int256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"string","name":"phone","type":"string"}],"name":"getUserIdFromPhone","outputs":[{"internalType":"int256","name":"","type":"int256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"getUserInformation","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"getUserVehicle","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getUserVehicleCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"_uid","type":"uint256"},{"internalType":"uint256","name":"_cid","type":"uint256"}],"name":"remove_challan","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"_home","type":"string"}],"name":"setAddress","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"_age","type":"string"}],"name":"setAge","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"_cnic","type":"string"}],"name":"setCnic","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"_password","type":"string"}],"name":"setPassword","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"_phone","type":"string"}],"name":"setPhoneNo","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"_name","type":"string"}],"name":"setUsername","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"users","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"age","type":"string"},{"internalType":"string","name":"homeaddress","type":"string"},{"internalType":"string","name":"CNIC","type":"string"},{"internalType":"string","name":"phone_no","type":"string"},{"internalType":"string","name":"password","type":"string"},{"internalType":"uint256","name":"challan_count","type":"uint256"},{"internalType":"uint256","name":"vehicle_count","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}]



contract:
pragma solidity ^0.5.0;
pragma experimental ABIEncoderV2;

contract User {
    uint public count = 0;
    mapping(uint => User)public users;     
    struct User {
        string name;
        string age;
        string homeaddress;
        string CNIC;
        string phone_no;
        string password;
        uint challan_count;
        mapping(uint=>uint) challans;
        uint vehicle_count;
        mapping(uint=>uint) vehicles;
    }
    function getUserChallanCount(uint id) public returns(uint){	
         return users[id].challan_count;	
    }
    function getUserVehicleCount(uint id) public returns(uint){	
         return users[id].vehicle_count;	
    }
    function setCnic(uint id,string memory _cnic) public returns(uint){	
        if(id<count){	
            users[id].CNIC=_cnic;	
            return 1;	
            	
        }   	
        return 0;	
    }
    function setPassword(uint id,string memory _password) public returns(uint){	
        if(id<count){	
            users[id].password=_password;	
            return 1;	
            	
        }   	
        return 0;	
    }
    function setPhoneNo(uint id,string memory _phone) public returns(uint){	
        if(id<count){	
            users[id].phone_no=_phone;	
            return 1;	
            	
        }   	
        return 0;	
    }
    function setAddress(uint id,string memory _home) public returns(uint){	
        if(id<count){	
            users[id].homeaddress=_home;	
            return 1;	
            	
        }   	
        return 0;	
    }
    function setUsername(uint id,string memory _name) public returns(uint){	
        if(id<count){	
            users[id].name=_name;	
            return 1;	
            	
        }   	
        return 0;	
    }	
    function setAge(uint id,string memory _age) public returns(uint){	
        if(id<count){	
            users[id].age=_age;

        }   	
        return 0;	
    }
    

    function Login(uint _id, string memory _password) public returns(string memory) {
        if(compareStrings(_password,users[_id].password)){
            return getUserInformation(_id);
    }else{
        return "1";
        }
    }
    function add_challan_to_user(uint _id,uint _challanNo) public {
        users[_id].challans[users[_id].challan_count]= _challanNo;
        users[_id].challan_count++;
    }
    function add_vehicle_to_user(uint _id,uint _vehicleNo) public {
        users[_id].challans[users[_id].challan_count]= _vehicleNo;
        users[_id].vehicle_count++;
    }
    function createUser(string memory a1,string memory a2,string memory a3,string memory a4,string memory a5,string memory a6) public returns(uint){
        users[count]= User(a1,a2,a3,a4,a5,a6,0,0);
        count++;
        return count-1;
    }
    
    function getUserChallans(uint _id) public returns(string memory) {
        string memory ret_val="";
        for (uint i=0;i<users[_id].challan_count;i++){
            ret_val=strConcat(ret_val,uint2str(users[_id].challans[i]));
            ret_val=strConcat(ret_val,":");
        }
        return ret_val;
    }
    function getCount()public view returns(uint){
        return count;
    }
    function getUserInformation(uint _id)public returns(string memory){
        string memory ret=strConcat(users[_id].name,users[_id].age,users[_id].homeaddress,users[_id].CNIC);
        return strConcat(ret,users[_id].phone_no);
    }
    function getUserVehicle(uint _id) public returns(string memory) {
        string memory ret_val="";
        for (uint i=0;i<users[_id].vehicle_count;i++){
            ret_val=strConcat(ret_val,uint2str(users[_id].vehicles[i]));
            ret_val=strConcat(ret_val,":");
        }
        return ret_val;
    }
    function getUserIdFromCNIC(string memory cnic) public returns(int) {
        int count1=int(count);
        for (int i=0;i<count1;i++){
            if (compareStrings(cnic,users[uint(i)].CNIC)){
                return i;
            }
        }
        return -1;
    }
    function getUserIdFromPhone(string memory phone) public returns(int) {
        int count1=int(count);
        for (int i=0;i<count1;i++){
            if (compareStrings(phone,users[uint(i)].phone_no)){
                return i;
            }
        }
        return -1;
    }
    function remove_challan(uint _uid,uint _cid)public returns(string memory){
        if (users[_uid].challan_count>0){
            return ";";
        }
        users[_uid].challans[_cid]=users[_uid].challans[users[_uid].challan_count-1];
        users[_uid].challan_count--;
        return "t";
    
    }
    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal returns (string memory){
        bytes memory _ba = bytes(_a);
        bytes memory _bb = bytes(_b);
        bytes memory _bc = bytes(_c);
        bytes memory _bd = bytes(_d);
        bytes memory _bcomma = bytes(",");
        string memory abcd = new string(_ba.length + _bb.length + _bc.length + _bd.length+3 );
        bytes memory babcde = bytes(abcd);
        uint k = 0;
        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];
        babcde[k++]=_bcomma[0];
        for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];
        babcde[k++]=_bcomma[0];
        for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];
        babcde[k++]=_bcomma[0];
        for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];
        return string(babcde);
    }
    function strConcat(string memory _a, string memory _b) internal returns (string memory){
        bytes memory _ba = bytes(_a);
        bytes memory _bb = bytes(_b);
        bytes memory _bcomma = bytes(",");
        string memory abcd = new string(_ba.length + _bb.length+1);
        bytes memory babcde = bytes(abcd);
        uint k = 0;
        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];
        babcde[_ba.length]=_bcomma[0];
        for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];
        
        return string(babcde);
    }
    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {
        if (_i == 0) {
            return "0";
        }
        uint j = _i;
        uint len;
        while (j != 0) {
            len++;
            j /= 10;
        }
        bytes memory bstr = new bytes(len);
        uint k = len - 1;
        while (_i != 0) {
            bstr[k--] = byte(uint8(48 + _i % 10));
            _i /= 10;
        }
        return string(bstr);
    }
    function compareStrings (string memory a, string memory b) public view returns (bool) {
        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))) );
    }
}


pragma solidity ^0.5.0;
pragma experimental ABIEncoderV2;

contract User {
    uint public count = 0;
    mapping(uint => User)public users;     
    struct User {
        string name;
        string age;
        string homeaddress;
        string CNIC;
        string phone_no;
        string password;
        uint challan_count;
        mapping(uint=>uint) challans;
        uint vehicle_count;
        mapping(uint=>uint) vehicles;
    }
    function getUserChallanCount(uint id) public returns(uint){	
         return users[id].challan_count;	
    }
    function getUserVehicleCount(uint id) public returns(uint){	
         return users[id].vehicle_count;	
    }
    function setCnic(uint id,string memory _cnic) public returns(uint){	
        if(id<count){	
            users[id].CNIC=_cnic;	
            return 1;	
            	
        }   	
        return 0;	
    }
    function setPassword(uint id,string memory _password) public returns(uint){	
        if(id<count){	
            users[id].password=_password;	
            return 1;	
            	
        }   	
        return 0;	
    }
    function setPhoneNo(uint id,string memory _phone) public returns(uint){	
        if(id<count){	
            users[id].phone_no=_phone;	
            return 1;	
            	
        }   	
        return 0;	
    }
    function setAddress(uint id,string memory _home) public returns(uint){	
        if(id<count){	
            users[id].homeaddress=_home;	
            return 1;	
            	
        }   	
        return 0;	
    }
    function setUsername(uint id,string memory _name) public returns(uint){	
        if(id<count){	
            users[id].name=_name;	
            return 1;	
            	
        }   	
        return 0;	
    }	
    function setAge(uint id,string memory _age) public returns(uint){	
        if(id<count){	
            users[id].age=_age;

        }   	
        return 0;	
    }
    function Login(uint _id, string memory _password) public returns(string memory) {
        if(compareStrings(_password,users[_id].password)){
            return getUserInformation(_id);
    }else{
        return "1";
        }
    }
    function add_challan_to_user(uint _id,uint _challanNo) public {
        users[_id].challans[users[_id].challan_count]= _challanNo;
        users[_id].challan_count++;
    }
    function add_vehicle_to_user(uint _id,uint _vehicleNo) public {
        users[_id].challans[users[_id].challan_count]= _vehicleNo;
        users[_id].vehicle_count++;
    }
    function createUser(string memory a1,string memory a2,string memory a3,string memory a4,string memory a5,string memory a6) public returns(uint){
        users[count]= User(a1,a2,a3,a4,a5,a6,0,0);
        count++;
        return count-1;
    }
    
    function getUserChallans(uint _id) public returns(string memory) {
        string memory ret_val="";
        for (uint i=0;i<users[_id].challan_count;i++){
            ret_val=strConcat(ret_val,uint2str(users[_id].challans[i]));
            ret_val=strConcat(ret_val,":");
        }
        return ret_val;
    }
    function getCount()public view returns(uint){
        return count;
    }
    function getUserInformation(uint _id)public returns(string memory){
        string memory ret=strConcat(users[_id].name,users[_id].age,users[_id].homeaddress,users[_id].CNIC);
        return strConcat(ret,users[_id].phone_no);
    }
    function getUserVehicle(uint _id) public returns(string memory) {
        string memory ret_val="";
        for (uint i=0;i<users[_id].vehicle_count;i++){
            ret_val=strConcat(ret_val,uint2str(users[_id].vehicles[i]));
            ret_val=strConcat(ret_val,":");
        }
        return ret_val;
    }
    function getUserIdFromCNIC(string memory cnic) public returns(int) {
        int count1=int(count);
        for (int i=0;i<count1;i++){
            if (compareStrings(cnic,users[uint(i)].CNIC)){
                return i;
            }
        }
        return -1;
    }
    function getUserIdFromPhone(string memory phone) public returns(int) {
        int count1=int(count);
        for (int i=0;i<count1;i++){
            if (compareStrings(phone,users[uint(i)].phone_no)){
                return i;
            }
        }
        return -1;
    }
    function remove_challan(uint _uid,uint _cid)public returns(string memory){
        if (users[_uid].challan_count>0){
            return ";";
        }
        users[_uid].challans[_cid]=users[_uid].challans[users[_uid].challan_count-1];
        users[_uid].challan_count--;
        return "t";
    
    }
    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal returns (string memory){
        bytes memory _ba = bytes(_a);
        bytes memory _bb = bytes(_b);
        bytes memory _bc = bytes(_c);
        bytes memory _bd = bytes(_d);
        bytes memory _bcomma = bytes(",");
        string memory abcd = new string(_ba.length + _bb.length + _bc.length + _bd.length+3 );
        bytes memory babcde = bytes(abcd);
        uint k = 0;
        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];
        babcde[k++]=_bcomma[0];
        for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];
        babcde[k++]=_bcomma[0];
        for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];
        babcde[k++]=_bcomma[0];
        for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];
        return string(babcde);
    }
    function strConcat(string memory _a, string memory _b) internal returns (string memory){
        bytes memory _ba = bytes(_a);
        bytes memory _bb = bytes(_b);
        bytes memory _bcomma = bytes(",");
        string memory abcd = new string(_ba.length + _bb.length+1);
        bytes memory babcde = bytes(abcd);
        uint k = 0;
        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];
        babcde[_ba.length]=_bcomma[0];
        for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];
        
        return string(babcde);
    }
    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {
        if (_i == 0) {
            return "0";
        }
        uint j = _i;
        uint len;
        while (j != 0) {
            len++;
            j /= 10;
        }
        bytes memory bstr = new bytes(len);
        uint k = len - 1;
        while (_i != 0) {
            bstr[k--] = byte(uint8(48 + _i % 10));
            _i /= 10;
        }
        return string(bstr);
    }
    function compareStrings (string memory a, string memory b) public view returns (bool) {
        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))) );
    }
}

